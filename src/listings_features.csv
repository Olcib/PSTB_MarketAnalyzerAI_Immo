#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
generate_map.py
-------------------------------------
Generate interactive maps of Airbnb listings per city using Folium.
"""

import os
import argparse
import pandas as pd
import folium


def generate_city_map(city):
    """
    Generate a Folium map for a given city's listings.
    """
    base_path = f"data/processed/{city}"
    listings_fp = f"{base_path}/listings_features.csv"

    if not os.path.exists(listings_fp):
        print(f"❌ Missing file: {listings_fp}")
        return

    # Load dataset
    print(f"📂 Loading listings for {city} ...")
    df = pd.read_csv(listings_fp)

    # Ensure required columns exist
    required_cols = ["latitude", "longitude"]
    for col in required_cols:
        if col not in df.columns:
            print(f"❌ Column {col} not found in {listings_fp}")
            return

    # Create base map centered on city coordinates
    center_lat = df["latitude"].mean()
    center_lon = df["longitude"].mean()
    city_map = folium.Map(location=[center_lat, center_lon], zoom_start=11)

    # Add basic markers
    for _, row in df.iterrows():
        if pd.notna(row["latitude"]) and pd.notna(row["longitude"]):
            folium.Marker(
                location=[row["latitude"], row["longitude"]],
                popup=f"Listing ID: {row.get('id', 'N/A')}"
            ).add_to(city_map)

    # Save to outputs/maps/
    os.makedirs("outputs/maps", exist_ok=True)
    output_fp = f"outputs/maps/map_{city}.html"
    city_map.save(output_fp)
    print(f"✅ Map saved: {output_fp}")


def main():
    parser = argparse.ArgumentParser(description="Generate Folium maps for Airbnb listings")
    parser.add_argument("--cities", nargs="+", default=["paris", "seattle"], help="Cities to process")
    args = parser.parse_args()

    for city in args.cities:
        generate_city_map(city)


if __name__ == "__main__":
    main()
