"""
J5 - 18h-20h: Interface Streamlit Chatbot MVP
===========================================
"""

import streamlit as st
import sys
sys.path.append('.')
from j5_rag_foundation import AirbnbRAG

st.set_page_config(
    page_title="MarketAnalyzer AI - Assistant Airbnb",
    page_icon="üè†",
    layout="wide"
)

# Initialize RAG system
@st.cache_resource
def load_rag_system():
    """Charge le syst√®me RAG en cache"""
    rag = AirbnbRAG()
    if rag.load_airbnb_data():
        rag.build_faiss_index()
        return rag
    return None

def main():
    st.title("üè† MarketAnalyzer AI - Assistant Airbnb")
    st.markdown("### Votre copilote IA pour l'analyse du march√© locatif")
    
    # Sidebar
    with st.sidebar:
        st.header("Navigation")
        tab = st.selectbox("Choisissez une section:", [
            "üí¨ Chat Assistant",
            "üìä R√©sultats ML",
            "‚ÑπÔ∏è √Ä propos"
        ])
    
    # Load RAG system
    rag = load_rag_system()
    if not rag:
        st.error("Erreur de chargement des donn√©es. V√©rifiez les fichiers CSV.")
        return
    
    # Chat Tab
    if tab == "üí¨ Chat Assistant":
        st.header("Assistant Conversationnel")
        st.markdown("Posez vos questions sur les donn√©es Airbnb Paris/Seattle")
        
        # Questions pr√©d√©finies
        st.subheader("Questions sugg√©r√©es:")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("Prix moyen Paris?"):
                st.session_state['question'] = "Quel est le prix moyen √† Paris?"
        
        with col2:
            if st.button("Performance mod√®les ML?"):
                st.session_state['question'] = "Comment performent vos mod√®les ML?"
                
        with col3:
            if st.button("Donn√©es Seattle?"):
                st.session_state['question'] = "Combien de logements √† Seattle?"
        
        # Zone de saisie
        question = st.text_input(
            "Votre question:", 
            value=st.session_state.get('question', ''),
            placeholder="Ex: Quel est le prix m√©dian √† Seattle?"
        )
        
        if st.button("Envoyer") or question:
            if question:
                with st.spinner("Recherche en cours..."):
                    # R√©cup√©ration documents
                    retrieved_docs = rag.retrieve(question, k=2)
                    
                    # G√©n√©ration r√©ponse
                    answer = rag.generate_answer(question, retrieved_docs)
                    
                    # Affichage
                    st.success("R√©ponse:")
                    st.write(answer)
                    
                    # Debug info
                    with st.expander("D√©tails techniques (debug)"):
                        st.write("Documents r√©cup√©r√©s:")
                        for i, doc in enumerate(retrieved_docs):
                            st.write(f"**Document {i+1}** (score: {doc['score']:.3f})")
                            st.write(doc['document'][:200] + "...")
            else:
                st.warning("Veuillez poser une question.")
    
    # ML Results Tab  
    elif tab == "üìä R√©sultats ML":
        st.header("R√©sultats Machine Learning")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Paris")
            st.metric("R¬≤ Final", "0.473", "+1.8%")
            st.metric("RMSE", "$163.64")
            st.metric("Logements", f"{len(rag.paris_data):,}")
            st.metric("Prix moyen", f"{rag.paris_target['price'].mean():.0f}‚Ç¨")
        
        with col2:
            st.subheader("Seattle") 
            st.metric("R¬≤ Final", "0.598", "+1.1%")
            st.metric("RMSE", "$59.81")
            st.metric("Logements", f"{len(rag.seattle_data):,}")
            st.metric("Prix moyen", f"{rag.seattle_target['price'].mean():.0f}$")
        
        st.subheader("Architecture Mod√®les")
        st.write("""
        **Meilleurs mod√®les:** Weighted Ensemble
        - Paris: LightGBM + CatBoost + XGBoost
        - Seattle: CatBoost + LightGBM + RandomForest
        
        **Feature top:** bedrooms √ó bathrooms (interaction)
        
        **Pipeline:** Baseline ‚Üí Optimisation ‚Üí Feature Engineering ‚Üí Ensemble
        """)
    
    # About Tab
    elif tab == "‚ÑπÔ∏è √Ä propos":
        st.header("√Ä propos de MarketAnalyzer AI")
        st.write("""
        **Mission:** Fournir aux professionnels de la location un assistant IA 
        capable d'analyser le march√© et d'√©mettre des recommandations data-driven.
        
        **Technologies:**
        - Machine Learning: LightGBM, CatBoost, XGBoost
        - NLP: Sentence Transformers, FAISS
        - Interface: Streamlit
        - D√©ploiement: Streamlit Cloud
        
        **Donn√©es analys√©es:**
        - Paris: 53,455 logements Airbnb
        - Seattle: 3,818 logements Airbnb
        - Source: Inside Airbnb (donn√©es r√©elles)
        """)

if __name__ == "__main__":
    main()